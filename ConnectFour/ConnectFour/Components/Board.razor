@inject GameState State
@inject IJSRuntime JS
@using System.Drawing


<HeadContent>
    <style>
        :root {
            --board-bg: @ColorTranslator.ToHtml(BoardColor);
            --player1: @ColorTranslator.ToHtml(Player1Color);
            --player2: @ColorTranslator.ToHtml(Player2Color);
        }
    </style>
</HeadContent>


<div class="d-flex justify-content-between align-items-center text-center" style="width: 100%; height: 100%;">
    <div class="d-flex flex-column justify-content-center align-items-center" style="flex-basis: 30%; text-align: center;">
        <p class="mb-1 mt-5" style="font-size: 25px; color: #003366; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); font-weight: bold; display: flex; align-items: center; justify-content: center;">Player 1 pieces</p>
        <div style="position: relative; display: inline-block;">
            <span style="width: 60px; height: 60px; border-radius: 50%;
                    background-color: var(--player1);
                    margin-left: 12px; display: inline-flex;
                    justify-content: center; align-items: center;
                    font-weight: bold; font-size: 24px;">
                @Player1_pieces
            </span>
        </div>

        <p class="mt-4 mb-1" style="font-size: 25px; color: #003366; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); font-weight: bold; display: flex; align-items: center; justify-content: center;">Player 2 pieces</p>
        <div style="position: relative; display: inline-block;">
            <span style="width: 60px; height: 60px; border-radius: 50%;
                    background-color: var(--player2);
                    margin-left: 12px; display: inline-flex;
                    justify-content: center; align-items: center;
                    font-weight: bold; font-size: 24px;">
                @Player2_pieces
            </span>
        </div>

        <br />
        <button class="btn btn-dark mt-4"
                @onclick="NavigateToRules"
                style="width: 200px; font-size: 18px; border-radius: 30px;">
            Game rules
        </button>
        <button class="btn btn-dark mt-4"
                @onclick="ResetGame"
                disabled="@string.IsNullOrEmpty(winnerMessage)"
                style="width: 200px; font-size: 18px; border-radius: 30px;">
            Restart the game
        </button>
    </div>

    <div class="d-flex flex-column justify-content-center align-items-center" style="flex-basis: 70%; text-align: center;">
        <article class="mb-3">
            <div class="text-center font-weight-bold" style="font-size: 30px; color: #003366; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); font-weight: bold; display: flex; align-items: center; justify-content: center;">
                @CurrentTurn
            </div>

            <div class="text-center font-weight-bold" style="font-size: 30px; color: #003366; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); font-weight: bold; display: flex; align-items: center; justify-content: center;">
                @winnerMessage
            </div>
        </article>

        <nav>
            @for (byte i = 0; i < 7; i++)
            {
                var col = i;
                <span title="Click to play a piece"
                      @onclick="() => PlayPiece(col)"
                      style="cursor: @(isAnimating ? "not-allowed" : "pointer");
                             opacity: @(isAnimating ? 0.3 : 1)">
                    🔽
                </span>
            }
        </nav>

        <div>
            <div class="board">
                @for (var i = 0; i < 42; i++)
                {
                    <span class="container">
                        <span></span>
                    </span>
                }
            </div>
            @for (var i = 0; i < 42; i++)
            {
                <span class="@pieces[i]"></span>
            }

            <div class="mt-3 text-center font-weight-bold"
                 style="font-size: 30px; height: 40px; color: #FF0000; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); font-weight: bold;">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    @errorMessage
                }
            </div>
        </div>
    </div>
</div>



@code {
    private string[] pieces = new string[42];

    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";

    private bool isAnimating = false;

    private int Player1_pieces = 0;
    private int Player2_pieces = 0;

    [Parameter]
    public Color BoardColor { get; set; } = ColorTranslator.FromHtml("yellow");

    [Parameter]
    public Color Player1Color { get; set; } = ColorTranslator.FromHtml("red");

    [Parameter]
    public Color Player2Color { get; set; } = ColorTranslator.FromHtml("blue");


    private async void PlayPiece(byte col)
    {
        if (isAnimating)
            return;

        errorMessage = string.Empty;

        try
        {
            isAnimating = true;

            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);

            pieces[turn] = $"player{player} col{col} drop{landingRow}";

            if (player == 1)
                Player1_pieces++;
            else
                Player2_pieces++;

            await Task.Delay(1500);

            winnerMessage = State.CheckForWin() switch
            {
                GameState.WinState.Player1_Wins => "Player 1 Wins!",
                GameState.WinState.Player2_Wins => "Player 2 Wins!",
                GameState.WinState.Tie => "It's a tie!",
                _ => ""
            };
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isAnimating = false;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }

    private async Task NavigateToRules()
    {
        await JS.InvokeVoidAsync("openInNewTab", "/counter");
    }

    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
        Player1_pieces = 0;
        Player2_pieces = 0;
    }
} 