@page "/game"
@using System.Drawing

@inject GamePlayer GamePlayer
@inject GameState State
@inject PlayerAI PlayerAI
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>ConnectFourGame</PageTitle>


<HeadContent>
    <style>
        :root {
            --board-bg: black;
            --player1: @ColorTranslator.ToHtml(Player1Color);
            --player2: @ColorTranslator.ToHtml(Player2Color);
        }
    </style>
</HeadContent>


<div class="d-flex flex-column-reverse flex-lg-row justify-content-between align-items-center text-center" style="width: 100%; height: 100%;">
    <div class="d-flex flex-column justify-content-center align-items-center main_left_content">
        @if (GamePlayer.Player2.IsAI)

        {
            <span class="difficulty_style text-muted"
                  style="font-size: 17px; color: black; font-weight: bold; width: 100%">
                Ai difficulty: @PlayerAI.GetDifficulty()
            </span>
            <hr class="w-50 hr_game" />
        }

        <div class="d-flex justify-content-between align-items-center w-100 left-class">
            <div class="text-center pieces_content">
                <p class="style_pieces">
                    player @GamePlayer.Player1.Name
                </p>

                <div style="position: relative; display: inline-block;">
                    <span style="width: 60px; height: 60px; border-radius: 50%;
                        background-color: var(--player1);
                        display: inline-flex;
                        justify-content: center; align-items: center;
                        font-weight: bold; font-size: 24px;">
                        @Player1_pieces
                    </span>
                </div>

                <p class="wins_style">
                    Wins: @Player1_Wins
                </p>
            </div>

            <div class="text-center pieces_content">
                <p class="style_pieces @(GamePlayer.Player2.IsAI ? "style_pieces_1" : "")">
                    player @GamePlayer.Player2.Name
                </p>

                <div style="position: relative; display: inline-block;">
                    <span style="width: 60px; height: 60px; border-radius: 50%;
                        background-color: var(--player2);
                        display: inline-flex;
                        justify-content: center; align-items: center;
                        font-weight: bold; font-size: 24px;">
                        @Player2_pieces
                    </span>
                </div>

                <p class="wins_style">
                    Wins: @Player2_Wins
                </p>
            </div>
        </div>

        <div class="d-flex flex-column align-items-center mt-4 mb-4">
            <button class="btn btn-dark mt-5"
                    @onclick="ResetGame"
                    disabled="@string.IsNullOrEmpty(winnerMessage)"
                    style="width: 200px; font-size: 18px; border-radius: 30px;">
                Restart the game
            </button>
        </div>
    </div>

    <div class="d-flex flex-column justify-content-center align-items-center board-side" style="flex-basis: 70%; text-align: center;">
        <div class="content" style="margin-top: 50px;">
            <article class="mb-3">
                <div class="text-center font-weight-bold" style="font-size: 30px; color: #003366; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); font-weight: bold; display: flex; align-items: center; justify-content: center;">
                    <span>@CurrentTurn</span>

                    @if (GamePlayer.Player2.IsAI && State.PlayerTurn == 2 && string.IsNullOrEmpty(winnerMessage))

                    {
                        <span class="bot-thinking-icon">🤖</span>
                    }
                </div>

                <div class="text-center font-weight-bold"
                     style="font-size: 30px; color: #003366; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); font-weight: bold; display: flex; align-items: center; justify-content: center;">
                    @winnerMessage
                </div>
            </article>

            <nav class="nav-layout">
                @for (byte i = 0; i < 7; i++)

                {
                    var col = i;
                    <span title="Click to play a piece"
                          @onclick="async () =>
                        {
                            bool isHumanTurn = !isAnimating && (!GamePlayer.Player2.IsAI || State.PlayerTurn == 1);

                            if (isHumanTurn)
                                await PlayPiece(col);
                        }"
                          style="cursor: @(isAnimating || (GamePlayer.Player2.IsAI && State.PlayerTurn != 1) ? "not-allowed" : "pointer");
                         opacity: @(isAnimating || (GamePlayer.Player2.IsAI && State.PlayerTurn != 1) ? 0.3 : 1);">
                        🔽
                    </span>
                }
            </nav>

            <div class="board-layout">
                <div class="board">
                    @for (var i = 0; i < 42; i++)

                    {
                        <span class="container @GetWinIndex(i)">
                            <span class="win-cross">@(winPositions.Contains(i) ? "X" : "")</span>
                        </span>
                    }
                </div>

                @for (var i = 0; i < 42; i++)

                {
                    <span class="@pieces[i]"></span>
                }

                <div class="mt-3 text-center font-weight-bold"
                     style="font-size: 30px; height: 40px; color: #FF0000; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); font-weight: bold;">
                    @if (!string.IsNullOrEmpty(errorMessage))

                    {
                        @errorMessage
                    }
                </div>
            </div>
        </div>
    </div>
</div>


<CustomDialog IsOpen="@isDialogOpen" OnConfirm="null">
    <div class="dialog-content-center">
        <p class="game-over-title">
            Game Over!
        </p>

        <div class="text-center font-weight-bold"
             style="font-size: 25px; color: #003366; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); font-weight: bold; display: flex; align-items: center; justify-content: center;">
            @winnerMessage
        </div>

        <span class="text-muted"
              style="font-size: 17px; color: black; font-weight: bold; width: 100%">
            game concluded in @(Player1_pieces + Player2_pieces) moves
        </span>
    </div>
</CustomDialog>


@code {
    private string[] pieces = new string[42];
    private List<int> winPositions = new List<int>();
    private string JsAudioFuncName = "playSound";


    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    private string CurrentTurn => string.IsNullOrEmpty(winnerMessage)

            ? $"{(State.PlayerTurn == 1 ? GamePlayer.Player1.Name : GamePlayer.Player2.Name)}'s Turn" : "";

    private bool isAnimating = false;
    private bool isDialogOpen = false;

    private int Player1_pieces = 0;
    private int Player2_pieces = 0;
    private int Player1_Wins = 0;
    private int Player2_Wins = 0;

    public Color Player1Color => ColorTranslator.FromHtml(GamePlayer.Player1.Color);
    public Color Player2Color => ColorTranslator.FromHtml(GamePlayer.Player2.Color);

    private PlayerAI botPlayer = null!;
    private GameState.WinState winnerState;


    private async Task PlayPiece(byte col)
    {
        if (isAnimating) return;

        errorMessage = string.Empty;

        try
        {
            isAnimating = true;

            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            byte landingRow = 0;

            landingRow = State.PlayPiece(col);

            pieces[turn] = $"player{player} col{col} drop{landingRow}";

            UpdateValues(player, false);

            await InvokeAsync(StateHasChanged);
            await JS.InvokeVoidAsync(JsAudioFuncName, "sounds/disc_fall.mp3");

            await Task.Delay(1000);

            CheckGameResult();

            if (!string.IsNullOrEmpty(winnerMessage))
            {
                UpdateWinPositions();

                await Task.Delay(500);

                if (winnerState == GameState.WinState.Player2_Wins && GamePlayer.Player2.IsAI)
                    _ = JS.InvokeVoidAsync(JsAudioFuncName, "sounds/bot_win.mp3");
                else
                    _ = JS.InvokeVoidAsync(JsAudioFuncName, "sounds/player_win.mp3");

                if (!GamePlayer.Player2.IsAI)

                    State.ChangePlayerMove();


                UpdateValues(player, true);
                ShowWinDialog();
            }
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isAnimating = false;

            StateHasChanged();
            await AIMakeMove();
        }
    }

    private void UpdateValues(int player, bool wins)
    {
        if (player == 1)
            _ = wins ? Player1_Wins++ : Player1_pieces++;
        else
            _ = wins ? Player2_Wins++ : Player2_pieces++;
    }

    private void CheckGameResult()
    {
        winnerState = State.CheckForWin();

        winnerMessage = winnerState switch
        {
            GameState.WinState.Player1_Wins => $"Player {GamePlayer.Player1.Name} Wins!",
            GameState.WinState.Player2_Wins => $"Player {GamePlayer.Player2.Name} Wins!",
            GameState.WinState.Tie => "It's a tie!",
            _ => ""
        };
    }

    private async Task AIMakeMove()
    {
        if (string.IsNullOrEmpty(winnerMessage) && State.PlayerTurn == 2 && GamePlayer.Player2.IsAI)
        {
            var move = await Task.Run(() => botPlayer.GetBestMove(PlayerAI.AiDifficulty));

            await InvokeAsync(() => PlayPiece((byte)move));
        }
    }

    private void UpdateWinPositions()
    {
        winPositions.Clear();

        var winState = State.CheckForWin();

        if (winState == GameState.WinState.Player1_Wins || winState == GameState.WinState.Player2_Wins)
        {
            foreach (var scenario in GameState.WinningPlaces)
            {
                int player = State.TheBoard[scenario[0]];

                if (player != 0 &&
                    State.TheBoard[scenario[1]] == player &&
                    State.TheBoard[scenario[2]] == player &&
                    State.TheBoard[scenario[3]] == player &&
                    ((winState == GameState.WinState.Player1_Wins && player == 1) ||
                     (winState == GameState.WinState.Player2_Wins && player == 2)))
                {
                    winPositions.AddRange(scenario);

                    break;
                }
            }
        }
    }

    private void ShowWinDialog()
    {
        isDialogOpen = true;
    }

    private string GetWinIndex(int index) => winPositions.Contains(index) ? "winning" : "";

    protected override void OnInitialized()
    {
        if (!IsValidPlayerData())
        {
            Navigation.NavigateTo("/ConnectFour-Blazor/", true);
        }

        botPlayer = new PlayerAI(State);

        State.ResetBoard();
    }

    private bool IsValidPlayerData()
    {
        var p1 = GamePlayer?.Player1;
        var p2 = GamePlayer?.Player2;

        return !string.IsNullOrWhiteSpace(p1?.Name)
            && !string.IsNullOrWhiteSpace(p2?.Name)
            && !string.IsNullOrWhiteSpace(p1?.Color)
            && !string.IsNullOrWhiteSpace(p2?.Color)
            && p1.Name != p2.Name
            && p1.Color != p2.Color;
    }

    private void ResetGame()
    {
        isDialogOpen = false;

        winPositions = new();

        State.ResetBoard();

        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];

        Player1_pieces = 0;
        Player2_pieces = 0;

        StateHasChanged();
    }
}
